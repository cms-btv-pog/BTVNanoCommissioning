name: QG-tag Workflow

on:
  push:
    branches: [ master ]
    paths:
    - 'src/BTVNanoCommissioning/workflows/*qgtag*'
    - 'src/BTVNanoCommissioning/helpers/update_branch.py'
    - 'src/BTVNanoCommissioning/helpers/func.py'
    - 'src/BTVNanoCommissioning/helpers/definitions.py'
    - 'src/BTVNanoCommissioning/utils/*'
    - '.github/workflows/qgtag_workflow.yml'
    
  pull_request_target:
    branches: [ master ]
    paths:
    - 'src/BTVNanoCommissioning/workflows/*qgtag*'
    - 'src/BTVNanoCommissioning/helpers/update_branch.py'
    - 'src/BTVNanoCommissioning/helpers/func.py'
    - 'src/BTVNanoCommissioning/helpers/definitions.py'
    - 'src/BTVNanoCommissioning/utils/*'
    - '.github/workflows/qgtag_workflow.yml'
   
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]
    
    defaults:
      run:
        shell: "bash -l {0}"

    steps:
    - uses: actions/checkout@v4

    - name: Merge PR locally
      if: github.event_name == 'pull_request_target'
      id: merge
      continue-on-error: true

      run: |
        git fetch origin pull/${{ github.event.pull_request.number }}/head:MR
        git checkout -b ATTEMPT_MERGE
        git merge MR
        git branch -vv 
        git remote -v 
        git diff master
    
    - uses: cvmfs-contrib/github-action-cvmfs@v4
      with:
        cvmfs_repositories: 'grid.cern.ch'

    - name: Set conda environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: true
        activate-environment: btv_coffea
        environment-file: test_env.yml
        auto-activate-base: false

    - name: Verify environment
      run: |
        conda info
        conda env list
        conda list
    
    - name: Set up proxy
      # https://awesome-workshop.github.io/gitlab-cms/03-vomsproxy/index.html
      # continue-on-error: true
      env:
        # To genereate secrets use (strip all \n)
        # base64 -i ~/.globus/usercert.pem | awk NF=NF RS= OFS=
        # base64 -i ~/.globus/userkey.pem | awk NF=NF RS= OFS=
        # Cross check roundtrip by adding ``| base64 -d `` and see if same as input
        GRID_USERKEY: ${{ secrets.GRID_USERKEY }}
        GRID_USERCERT: ${{ secrets.GRID_USERCERT }}
        # Read automatically by voms-proxy-init
        X509_VOMS_DIR: /cvmfs/grid.cern.ch/etc/grid-security/vomsdir/
        X509_VOMSES: /cvmfs/grid.cern.ch/etc/grid-security/vomses/
        X509_CERT_DIR: /cvmfs/grid.cern.ch/etc/grid-security/certificates/
        X509_DEFAULT_USER_CERT: $HOME/.globus/usercert.pem
        X509_DEFAULT_USER_KEY: $HOME/.globus/userkey.pem
      run: |
        sudo apt-get update
        sudo apt-get install fetch-crl ca-certificates
        
        # Set up user certificates
        mkdir -p $HOME/.globus
        printf "$GRID_USERKEY" | base64 -d > $HOME/.globus/userkey.pem
        printf "$GRID_USERCERT" | base64 -d > $HOME/.globus/usercert.pem
        
        # Set proper permissions
        chmod 400 $HOME/.globus/userkey.pem
        chmod 644 $HOME/.globus/usercert.pem
        
        # Generate random seed
        openssl rand -out $HOME/.rnd -hex 256
        
        # Create VOMS proxy with --ignorewarn to handle CRL issues
        printf "${{secrets.GRID_PASSWORD}}" | voms-proxy-init \
          --voms cms \
          --pwstdin \
          -certdir /cvmfs/grid.cern.ch/etc/grid-security/certificates/ \
          -vomses $X509_VOMSES \
          --valid 12:00 \
          --ignorewarn
        
        # Verify proxy was created
        voms-proxy-info -all
    
    - name: Install Repo
      run: |
        pip install -e .
    

    - name: QG-tag dijet
      run: |
        string=$(git log -1 --pretty=format:'%s')
        if [[ $string == *"ci:skip array"* ]]; then
        opts=$(echo "$opts" | sed 's/--isArray //g')
        fi
        if [[ $string == *"ci:skip syst"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all//g')
        elif [[ $string == *"ci:JERC_split"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst JERC_split/g')
        elif [[ $string == *"ci:weight_only"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst weight_only/g') 
        fi
        python runner.py --workflow qgtag_dijet --json metadata/Summer23BPix/data_Summer23BPix_2023_jetmet_zb_Nano_Run3_2023_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all 
        python runner.py --workflow qgtag_dijet --json metadata/Summer23BPix/MC_Summer23BPix_2023_qcd_Nano_Run3_2022_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all 

        python runner.py --workflow qgtag_dijet_hf --json metadata/Summer23BPix/data_Summer23BPix_2023_jetmet_zb_Nano_Run3_2023_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all 
        python runner.py --workflow qgtag_dijet_hf --json metadata/Summer23BPix/MC_Summer23BPix_2023_qcd_Nano_Run3_2022_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all

        python runner.py --workflow qgtag_dijet_zbppfjet --json metadata/Summer23BPix/data_Summer23BPix_2023_jetmet_zb_Nano_Run3_2023_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all
        python runner.py --workflow qgtag_dijet_zbppfjet --json metadata/Summer23BPix/MC_Summer23BPix_2023_qcd_Nano_Run3_2022_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1  --executor iterative  --campaign Summer23BPix --overwrite --year 2023 $opts  --isSyst all

    - name: QG-tag Z+jet
      run: |
        message=$(git log -1 --pretty=format:'%s')
        if [[ $string == *"ci:skip array"* ]]; then
        opts=$(echo "$opts" | sed 's/--isArray //g')
        fi
        if [[ $string == *"ci:skip syst"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all//g')
        elif [[ $string == *"ci:JERC_split"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst JERC_split/g')
        elif [[ $string == *"ci:weight_only"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst weight_only/g') 
        fi

        python runner.py --workflow qgtag_DY_sf --json metadata/Summer23BPix/data_Summer23BPix_2023_mu_BTV_Run3_2023_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1 --executor iterative  --campaign Summer23BPix --year 2023 --overwrite $opts --isSyst all 
        python runner.py --workflow qgtag_DY_sf --json metadata/Summer23BPix/MC_Summer23BPix_2023_BTV_Run3_2023_Comm_MINIAODv4_NanoV12.json --only DYto2L-2Jets_MLL-50_* --max 1 --limit 1 --executor iterative  --campaign Summer23BPix --year 2023 --overwrite $opts --isSyst all 

    - name: QG-tag Ph+jet
      run: |
        message=$(git log -1 --pretty=format:'%s')
        if [[ $string == *"ci:skip array"* ]]; then
        opts=$(echo "$opts" | sed 's/--isArray //g')
        fi
        if [[ $string == *"ci:skip syst"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all//g')
        elif [[ $string == *"ci:JERC_split"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst JERC_split/g')
        elif [[ $string == *"ci:weight_only"* ]]; then
            opts=$(echo "$opts" | sed 's/--isSyst all/--isSyst weight_only/g') 
        fi

        python runner.py --workflow qgtag_photonjet --json metadata/Summer23BPix/data_Summer23BPix_2023_egm_Nano_Run3_2023_Comm_MINIAODv4_NanoV12.json --max 1 --limit 1 --executor iterative  --campaign Summer23BPix --year 2023 --overwrite $opts --isSyst all 
        python runner.py --workflow qgtag_photonjet --json metadata/Summer23BPix/MC_Summer23BPix_2023_gjets_Nano_Run3_2023_Comm_MINIAODv4_NanoV12.json --only *PTG* --max 1 --limit 1 --executor iterative  --campaign Summer23BPix --year 2023 --overwrite $opts --isSyst all 
    

